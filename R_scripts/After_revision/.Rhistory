library(vcfR)
library(tidyverse)
library(ggokabeito)
library(RcppRoll)
dat <- read_csv("/Users/nuriteliash/Documents/GitHub/varroa-pedigree-study/data/meta_data_223.csv")
vcf <- read.vcfR("/Users/nuriteliash/Documents/GitHub/varroa-pedigree-study/data/vcf_filter/Q40BIALLDP16HDP40mis.5Chr7/Q40BIALLDP16HDP40mis.5Chr7.recode.vcf", verbose = FALSE )
vcf
ad <- extract.gt(vcf, element = 'AD')
knitr::kable(ad[c(1:2,11,30),1:4])
# get rid of homozygous genotypes
gt <- extract.gt(vcf, element = 'GT')
is_het <- as.data.frame(is_het(gt)) %>% rownames_to_column(var = "site") %>% pivot_longer(-site, names_to = "id", values_to = "het")
ad2 <- as.data.frame(ad) %>% rownames_to_column(var = "site") %>% pivot_longer(-site, names_to = "id", values_to = "ad") %>% separate("ad", into = c("ref","alt"), sep = ",")
ad2 <- select(dat, generation, sex, family, id = sample) %>% left_join(ad2) %>%  mutate(chrom = str_split(site, pattern = "_", simplify = TRUE)[, 2])
ad2 <- left_join(is_het, ad2)
ad2 <- ad2 %>% mutate(ref = as.numeric(ref), alt = as.numeric(alt))
ad2 <- mutate(ad2, chrom = factor(chrom, levels = unique(chrom), labels = seq_len(7)))
# Rename the column names of the genotype matrix ('vcf@gt'):
# 1. Use `sub()` to modify the column names by removing trailing substrings.
# 2. The pattern "_S\\d+$" matches:
#    - An underscore ("_"),
#    - Followed by an "S",
#    - Followed by one or more digits ("\\d+"),
#    - At the end of the string ("$").
# 3. Replace these substrings with an empty string (""), effectively removing them.
colnames(vcf@gt) <- sub("_S\\d+$", "", colnames(vcf@gt))
pull_gt <- function(individual_ids) {
# given a list of names, pull genotypes and attach metadata
sample_names <- colnames(vcf@gt)[-1]
subset_ids <- individual_ids[individual_ids %in% sample_names]
vcf_subset <- vcf[, c(TRUE, colnames(vcf@gt)[-1] %in% subset_ids)]
# Extract GT (Genotype) and DP (Depth of Coverage) values
gt_matrix <- extract.gt(vcf_subset, element = "GT")
dp_matrix <- extract.gt(vcf_subset, element = "DP", as.numeric = TRUE)
# Prepare data by converting matrices to data frames
gt_df <- as.data.frame(gt_matrix)
gt_df$Position <- rownames(gt_df)
dp_df <- as.data.frame(dp_matrix)
dp_df$Position <- rownames(dp_df)
# Create a long-format data frame with GT and DP
gt_long <- gt_df %>%
pivot_longer(cols = -Position, names_to = "Sample", values_to = "GT")
dp_long <- dp_df %>%
pivot_longer(cols = -Position, names_to = "Sample", values_to = "DP")
# Join the long-format data frames
long_data <- inner_join(gt_long, dp_long, by = c("Position", "Sample")) %>% left_join(dat, by = c("Sample" = "name")) %>% filter(!is.na(GT)) %>% separate(Position, sep = ".1_", into = c("chrom", "pos"))
return(long_data)
}
individual_ids <- filter(dat, generation == "F0" | generation == "F1" & sex == "female") %>% pull(name)
# Filter to include only 0/0 genotypes
filtered_data <- long_data %>%
filter((GT == "0/0" & generation == "F0") | (GT == "0/1" & generation == "F1")) %>%
drop_na(DP)
individual_ids <- filter(dat, generation == "F0" | generation == "F1" & sex == "female") %>% pull(name)
# Filter to include only 0/0 genotypes
filtered_data <- long_data %>%
filter((GT == "0/0" & generation == "F0") | (GT == "0/1" & generation == "F1")) %>%
drop_na(DP)
families <- pull_gt(filter(dat, generation == "F0" | (generation == "F1" & sex == "male")) %>% pull(name))
# Identify heterozygous sites for mothers (F0 generation)
mom_het_sites <- families %>% filter(generation == "F0" & GT == "0/1")
# Determine if all individuals within a family have the same genotype at each position, then average this consistency across all families for a given chromosomal position.
fam2 <- families  %>% group_by(family, chrom, pos) %>% reframe(all_same = all(GT == first(GT))) %>% mutate(pos = as.numeric(pos)) %>% group_by(chrom, pos) %>% reframe(all_same = mean(all_same))
# Define a function to calculate the rolling mean based on physical distances
rolling_mean_distance_step <- function(pos, value, window_size, step_size) {
roll_mean <- rep(NA, length(pos))
for (i in seq(1, length(pos), by = step_size)) {
lower_bound <- pos[i] - window_size / 2
upper_bound <- pos[i] + window_size / 2
in_window <- which(pos >= lower_bound & pos <= upper_bound)
roll_mean[in_window] <- mean(value[in_window], na.rm = TRUE)
}
return(roll_mean)
}
window_size <- 10000 # Adjust window size as needed
step_size <- 1000 # Adjust step size as needed
fam3 <- fam2 %>% select(chrom, pos, all_same) %>%
group_by(chrom) %>%
arrange(pos) %>%
mutate(rolling_avg = rolling_mean_distance_step(pos, all_same, window_size, step_size))
ggplot(fam3, aes(x = pos, y = as.numeric(all_same), color = all_same)) +
geom_point(alpha = 0.5) +
geom_line(aes(y = rolling_avg), color = "red", size = 1) +
facet_wrap(~ chrom, scales = "free_x") +
labs(title = "Rolling Average of TRUE/FALSE Probability by Chromosome",
x = "Position",
y = "TRUE/FALSE",
color = "All Same") +
theme_minimal()
mom_het_sites %>% select(chrom, pos) %>% left_join(fnd_110) %>%
group_by(chrom, pos) %>% reframe(all_same = all(GT == first(GT))) %>%
ggplot(aes(chrom, pos, color = all_same)) + geom_point() + theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())
fnd_110 %>% ggplot(aes(chrom, pos, color = GT)) + geom_point() + facet_grid(sex~generation, space = "free") + theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())
fnd_110
all_members <- dat %>%
group_by(family) %>%
summarize(
all_members = all(
sum(generation == "F0" & sex == "female") > 0,
sum(generation == "F1" & sex == "male") > 0,
sum(generation == "F1" & sex == "female") > 0,
sum(generation == "F2" & sex == "male") > 0,
sum(generation == "F2" & sex == "female") > 0
)
) %>% filter(all_members == TRUE) %>% pull(family)
all_members
mothers <- dat %>% filter(family %in% all_members) %>% filter((generation == "F0" | generation == "F1") & sex == "female") %>% pull(name)
mothers
mothers <- pull_gt(mothers) %>% filter(chrom == "NW_019211454")
mothers %>% group_by(family) %>% summarise(grandmother = sum(generation == "F0" & GT == "0/0"), mother = sum(generation == "F1" & GT == "0/1")) %>% filter(mother > 1000 & grandmother > 1000)
# Filter Families with High Genotype Counts
mothers %>% group_by(family) %>% summarise(grandmother = sum(generation == "F0" & GT == "0/0"), mother = sum(generation == "F1" & GT == "0/1")) %>% filter(mother > 1000 & grandmother > 1000)
mothers %>%
group_by(family, generation) %>%
summarise(count = n()) %>%
ggplot(aes(x = family, y = count, fill = generation)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Genotype Counts by Family and Generation", x = "Family", y = "Count")
# poor similarity mother and son
c(412, 400, 458, 46, 426, 240)
# set up family and members
fam_id <- 564
# Extract Sample Names for Family Members
grandma <- filter(dat, family == fam_id & generation == "F0" & sex == "female") %>% pull(name)
father <- filter(dat, family == fam_id & generation == "F1" & sex == "male") %>% pull(name)
mother <- filter(dat, family == fam_id & generation == "F1" & sex == "female") %>% pull(name)
son <-    filter(dat, family == fam_id & generation == "F2" & sex == "male") %>% pull(name)
daughter <- filter(dat, family == fam_id & generation == "F2" & sex == "female") %>% pull(name)
grandma
father
mother
son
daughter
daughter
daughter[1]
daughter[2]
fam <- pull_gt(c(grandma, father, mother, son, daughter)) %>% filter(chrom == "NW_019211454") %>% mutate(pos = as.numeric(pos))
son
daughter
filter(dat, family == fam_id & generation == "F0" & sex == "female")
dat
View(dat)
# remove sisters and aunties, with no offspring:
dat %>%  filter(!str_detect(Sample, "sis")) %>% view()
# Load the metadata CSV file into a data frame 'dat'
dat <- read_csv("/Users/nuriteliash/Documents/GitHub/varroa-pedigree-study/data/meta_data_223.csv")
dat <- read_csv("/Users/nuriteliash/Documents/GitHub/varroa-pedigree-study/data/meta_data_223.csv")
remove(dat)
library(vcfR)
library(tidyverse)
library(ggokabeito)
library(RcppRoll)
library(vcfR)
library(tidyverse)
library(ggokabeito)
library(RcppRoll)
library(ggalluvial)
# Load the metadata CSV file into a data frame 'dat', and keep only one F1 female per family.
dat <- read_csv("/Users/nuriteliash/Documents/GitHub/varroa-pedigree-study/data/meta_data_223.csv") %>%
filter(!str_detect(name, "sis")) %>% # remove sisters and aunties, F1s without offspring
filter(!str_detect(name, "479-2")) %>%   # in family 478, i kept 479-1
filter(!str_detect(name, "565-2")) %>%   # in Family 564, I kept 565-1
filter(!str_detect(name, "535_1")) %>%   # in Family 534, I kept 535-2
filter(!str_detect(name, "535_3"))  # in Family 534, I kept 535-2
# Read the VCF file into an object 'vcf' using the vcfR library; 'verbose = FALSE' suppresses extra output
vcf <- read.vcfR("/Users/nuriteliash/Documents/GitHub/varroa-pedigree-study/data/vcf_filter/Q40BIALLDP16HDP40mis.5Chr7/Q40BIALLDP16HDP40mis.5Chr7.recode.vcf", verbose = FALSE)
# Display a summary of the VCF object (basic details about the VCF data)
vcf
# Extract the allele depth (AD) information for each variant and sample from the VCF file
ad <- extract.gt(vcf, element = 'AD')
# Create a small table displaying selected rows (1, 2, 11, 30) and columns (1 to 4) of the allele depth matrix
knitr::kable(ad[c(1:2,11,30),1:4])
# Extract the genotype (GT) information from the VCF file; this contains information about the genotype calls (e.g., 0/0, 0/1, 1/1)
gt <- extract.gt(vcf, element = 'GT')
# Rename the column names of the genotype matrix ('vcf@gt'):
# 1. Use `sub()` to modify the column names by removing trailing substrings.
# 2. The pattern "_S\\d+$" matches:
#    - An underscore ("_"),
#    - Followed by an "S",
#    - Followed by one or more digits ("\\d+"),
#    - At the end of the string ("$").
# 3. Replace these substrings with an empty string (""), effectively removing them.
colnames(vcf@gt) <- sub("_S\\d+$", "", colnames(vcf@gt))
is_het <- as.data.frame(is_het(gt)) %>% rownames_to_column(var = "site") %>% pivot_longer(-site, names_to = "id", values_to = "het")
ad2 <- as.data.frame(ad) %>% rownames_to_column(var = "site") %>% pivot_longer(-site, names_to = "id", values_to = "ad") %>% separate("ad", into = c("ref","alt"), sep = ",")
ad2 <- select(dat, generation, sex, family, id = sample) %>% left_join(ad2) %>%  mutate(chrom = str_split(site, pattern = "_", simplify = TRUE)[, 2])
ad2 <- left_join(is_het, ad2)
ad2 <- ad2 %>% mutate(ref = as.numeric(ref), alt = as.numeric(alt))
ad2 <- mutate(ad2, chrom = factor(chrom, levels = unique(chrom), labels = seq_len(7)))
# Function to extract genotype (GT) and depth of coverage (DP) data for a subset of samples
# and attach associated metadata from the metadata file.
pull_gt <- function(individual_ids) {
# given a list of names, pull genotypes and attach metadata
sample_names <- colnames(vcf@gt)[-1]
subset_ids <- individual_ids[individual_ids %in% sample_names]
vcf_subset <- vcf[, c(TRUE, colnames(vcf@gt)[-1] %in% subset_ids)]
# Extract GT (Genotype) and DP (Depth of Coverage) values
gt_matrix <- extract.gt(vcf_subset, element = "GT")
dp_matrix <- extract.gt(vcf_subset, element = "DP", as.numeric = TRUE)
# Prepare data by converting matrices to data frames
gt_df <- as.data.frame(gt_matrix)
gt_df$Position <- rownames(gt_df)
dp_df <- as.data.frame(dp_matrix)
dp_df$Position <- rownames(dp_df)
# Create a long-format data frame with GT and DP
gt_long <- gt_df %>%
pivot_longer(cols = -Position, names_to = "Sample", values_to = "GT")
dp_long <- dp_df %>%
pivot_longer(cols = -Position, names_to = "Sample", values_to = "DP")
# Join the long-format data frames
long_data <- inner_join(gt_long, dp_long, by = c("Position", "Sample")) %>% left_join(dat, by = c("Sample" = "name")) %>% filter(!is.na(GT)) %>% separate(Position, sep = ".1_", into = c("chrom", "pos"))
return(long_data)
}
#Extract families based on specific generations and conditions:
#Generation F0 (all individuals).
#Generation F1 (only males).
families <- pull_gt(filter(dat, generation == "F0" | (generation == "F1" & sex == "male")) %>% pull(name))
# Identify heterozygous sites for mothers (F0 generation)
mom_het_sites <- families %>% filter(generation == "F0" & GT == "0/1")
# Determine if all individuals within a family have the same genotype at each position, then average this consistency across all families for a given chromosomal position.
fam2 <- families  %>% group_by(family, chrom, pos) %>% reframe(all_same = all(GT == first(GT))) %>% mutate(pos = as.numeric(pos)) %>% group_by(chrom, pos) %>% reframe(all_same = mean(all_same))
# Define a function to calculate the rolling mean based on physical distances
rolling_mean_distance_step <- function(pos, value, window_size, step_size) {
roll_mean <- rep(NA, length(pos))
for (i in seq(1, length(pos), by = step_size)) {
lower_bound <- pos[i] - window_size / 2
upper_bound <- pos[i] + window_size / 2
in_window <- which(pos >= lower_bound & pos <= upper_bound)
roll_mean[in_window] <- mean(value[in_window], na.rm = TRUE)
}
return(roll_mean)
}
#  rolling average of genotype consistency (all_same) across genomic positions for each chromosome, providing a smoothed representation of how genotype consistency varies along the genome.
window_size <- 10000 # Adjust window size as needed
step_size <- 1000 # Adjust step size as needed
fam3 <- fam2 %>% select(chrom, pos, all_same) %>%
group_by(chrom) %>%
arrange(pos) %>%
mutate(rolling_avg = rolling_mean_distance_step(pos, all_same, window_size, step_size))
ggplot(fam3, aes(x = pos, y = as.numeric(all_same), color = all_same)) +
geom_point(alpha = 0.5) +
geom_line(aes(y = rolling_avg), color = "red", size = 1) +
facet_wrap(~ chrom, scales = "free_x") +
labs(title = "Rolling Average of TRUE/FALSE Probability by Chromosome",
x = "Position",
y = "TRUE/FALSE",
color = "All Same") +
theme_minimal()
# i think this code is for one family?..
#mom_het_sites %>% select(chrom, pos) %>% left_join(fnd_110) %>%
# group_by(chrom, pos) %>% reframe(all_same = all(GT == first(GT))) %>%
# ggplot(aes(chrom, pos, color = all_same)) + geom_point() + theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())
#fnd_110 %>% ggplot(aes(chrom, pos, color = GT)) + geom_point() + facet_grid(sex~generation, space = "free") + theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())
#Extract families based on specific generations and conditions:
#Generation F0 (all individuals).
#Generation F1 (only males).
families <- pull_gt(filter(dat, generation == "F0" | (generation == "F1" & sex == "male")) %>% pull(name))
# Identify heterozygous sites for mothers (F0 generation)
mom_het_sites <- families %>% filter(generation == "F0" & GT == "0/1")
# Determine if all individuals within a family have the same genotype at each position, then average this consistency across all families for a given chromosomal position.
fam2 <- families  %>% group_by(family, chrom, pos) %>% reframe(all_same = all(GT == first(GT))) %>% mutate(pos = as.numeric(pos)) %>% group_by(chrom, pos) %>% reframe(all_same = mean(all_same))
# identify families in the dataset (dat) that have all required members across generations (F0, F1, F2) and sexes (male, female).
all_members <- dat %>%
group_by(family) %>%
summarize(
all_members = all(
sum(generation == "F0" & sex == "female") > 0,
sum(generation == "F1" & sex == "male") > 0,
sum(generation == "F1" & sex == "female") > 0,
sum(generation == "F2" & sex == "male") > 0,
sum(generation == "F2" & sex == "female") > 0
)
) %>% filter(all_members == TRUE) %>% pull(family)
#Subset Genotype Data for Mothers
mothers <- dat %>% filter(family %in% all_members) %>% filter((generation == "F0" | generation == "F1") & sex == "female") %>% pull(name)
#Retains only data for the largest chromosome (NW_019211454).
mothers <- pull_gt(mothers) %>% filter(chrom == "NW_019211454")
# poor similarity mother and son
c(412, 400, 458, 46, 426, 240)
# good families: (lots of sites, not many weired sites)
# 284, 338, 478, 534, 564, 476
# set up family and members
fam_id <- 498
# Extract Sample Names for Family Members
grandma <- filter(dat, family == fam_id & generation == "F0" & sex == "female") %>% pull(name)
father <- filter(dat, family == fam_id & generation == "F1" & sex == "male") %>% pull(name)
mother <- filter(dat, family == fam_id & generation == "F1" & sex == "female") %>% pull(name)
son <-    filter(dat, family == fam_id & generation == "F2" & sex == "male") %>% pull(name)
daughter <- filter(dat, family == fam_id & generation == "F2" & sex == "female") %>% pull(name)
daughter <- daughter[1]  # Select the first daughter if multiple daughters exist
fam <- pull_gt(c(grandma, father, mother, son, daughter)) %>% filter(chrom == "NW_019211454") %>% mutate(pos = as.numeric(pos))
grandma_homo <- filter(fam, GT == "0/0" & generation == "F0") %>% pull(pos)
mother_hetero <- filter(fam, generation == "F1" & sex == "female" & GT == "0/1") %>% pull(pos)
good_sites <- intersect(grandma_homo, mother_hetero)
fam2 <- fam %>%
filter(pos %in% good_sites) %>%  # Keep only sites appearing in both F0 & F1 females
mutate(member = case_when(
generation == "F0" & sex == "female" ~ "grandmother",
generation == "F1" & sex == "male" ~ "father",
generation == "F1" & sex == "female" ~ "mother",
generation == "F2" & sex == "male" ~ "son",
generation == "F2" & sex == "female" ~ "daughter",
TRUE ~ "unknown"
))
# Assign factor separately
fam2 <- fam2 %>%
mutate(member = factor(member, levels = c("grandmother", "father", "son", "mother", "daughter")))
# Find positions that appear in all members
positions_all_members <- fam2 %>%
group_by(pos) %>%
summarise(member_count = n_distinct(member), .groups = "drop") %>%
filter(member_count == n_distinct(fam2$member)) %>%
pull(pos)
# Filter fam2 to keep only rows with these positions
fam2_common <- fam2 %>% filter(pos %in% positions_all_members)
# Filter fam2 to keep only sites with depth higher then 20
#fam2_common <- fam2_common %>% filter(DP > 30)
# Ensure positions are sorted
fam2_common <- fam2_common %>% arrange(pos)
# Generate 30 evenly spaced indices and round them to ensure integer indices
indices <- round(seq(1, nrow(fam2_common), length.out = 30))
# Select the corresponding positions
selected_positions <- fam2_common %>% slice(indices) %>% pull(pos)
# Filter the dataset based on these selected positions
fam2_selected <- fam2_common %>% filter(pos %in% selected_positions) %>%  filter(!is.na(member), !is.na(pos), !is.na(GT))
# Create a numeric x-axis for spacing (convert 'member' to factor and assign spacing)
# Ensure GT is a factor with all genotype levels and order family members
fam2_selected <- fam2_selected %>%
mutate(
GT = factor(GT, levels = c("0/0", "0/1", "1/1"), labels = c("AA", "AB", "BB")),  # Ensure "BB" exists in factor levels
member = factor(member, levels = c("grandmother", "father", "mother", "son", "daughter"), ordered = TRUE)  # Explicit order
) %>%
mutate(member_num = as.numeric(member))  # Convert ordered factor to numeric
#write.csv(fam2_common, file="fam2_common.csv", row.names=FALSE)
#write.csv(fam2_selected, file="fam2_selected.csv", row.names=FALSE)
# Create a numeric x-axis for spacing (convert 'member' to factor and assign spacing)
fam2_selected %>%
mutate(
pos = ifelse(member %in% c("father", "mother"), pos + 100*10^6, pos),  # Adjusts positions
pos = ifelse(member %in% c("grandmother"), pos + 100*10^6*2, pos)) %>%
ggplot(aes(x = member_num, y = pos, color = GT)) +
geom_segment(aes(x = member_num - 0.3, xend = member_num + 0.3, y = pos, yend = pos), size = 1.5) +  # Horizontal lines with spacing
scale_x_continuous(breaks = unique(fam2_selected$member_num), labels = unique(fam2_selected$member)) +  # Restore original labels
scale_color_manual(
values = c("AA" = "#ffbf00", "AB" = "#66b032", "BB" = "#1982c4"),  # Updated colors for renamed genotypes
name = "Genotype",
breaks = c("AA", "AB", "BB")  # Ensures BB appears in the legend even if absent
) +
theme_classic() +
labs(
title = paste("Genotype Flow Across Family Members
Family ID:", fam_id),
x = "Family Member",
y = "Genomic Position"
) +
theme(
axis.text.x = element_text(size = 12, face = "bold", angle = 30, hjust = 1),  # Rotate labels
panel.grid.major = element_blank(),
axis.line.x = element_blank(),  # <-- Removes the x-axis line
axis.ticks.x = element_blank())  # Removes x-axis ticks
# Filter for the F1 male
fam2_filtered <- fam2_common %>%
filter(generation == "F2") %>%
filter(sex == "male")
# Extract unique family number (assuming there's only one)
family_number <- unique(fam2_filtered$family)
# Scatter plot of DP by position, colored by GT
ggplot(fam2_filtered, aes(x = pos, y = DP, color = GT)) +
geom_point(alpha = 0.7, size = 2) +  # Scatter plot
# One single trend line (black, dashed)
geom_smooth(method = "loess", se = FALSE, linetype = "dashed", color = "black") +
theme_minimal() +
labs(title = paste("Depth (DP) Across Positions by Genotype (GT)\n in Son of Family", family_number, "with 0/1 Mom"),
x = "Genomic Position",
y = "Depth (DP)",
color = "Genotype (GT)") +
# Keep color coding for GT points
scale_color_manual(values = c("0/0" = "red", "0/1" = "gray")) +
theme(text = element_text(size = 14))
# Filter for selected sites where GT == "0/0"
none_mother_sites <- fam2_filtered %>%
filter(GT == "0/0") %>%
select(pos) %>%  # Keep only the position column
distinct()  # Remove duplicates
# Filter for grandmother (F0 female)
mother_filtered <- fam2_common %>%
filter(generation == "F1") %>%
filter(sex == "female") %>%
mutate(site_status = ifelse(pos %in% none_mother_sites$pos, "Not Mom's Site", "Mom's Site"))  # Mark sites
# check these sites' depth , in the F0 female (grandmother)
ggplot(mother_filtered, aes(x = pos, y = DP, color = site_status)) +
geom_point(alpha = 0.7, size = 2) +  # Scatter plot
# One single trend line (black, dashed)
geom_smooth(method = "loess", se = FALSE, linetype = "dashed", color = "black") +
theme_minimal() +
labs(title = "Depth (DP) Across Positions in Mother\nColor-Coded by Selected Sites from Son",
x = "Genomic Position",
y = "Depth (DP)",
color = "Site Status") +
# Lighter blue for "Mom's Site" to balance red contrast
scale_color_manual(values = c("Mom's Site" = "lightblue", "Not Mom's Site" = "red")) +
theme(text = element_text(size = 14))
